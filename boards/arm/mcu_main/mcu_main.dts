/dts-v1/;
#include <st/g4/stm32g474Xe.dtsi>
#include <st/g4/stm32g474v(b-c-e)tx-pinctrl.dtsi>

// see stm32g4xx_ll_dmamux.h
#define DMAMUX_REQ_USART1_RX 0x18
#define DMAMUX_REQ_USART1_TX 0x19
#define DMAMUX_REQ_USART3_RX 0x1C
#define DMAMUX_REQ_USART3_TX 0x1D

#define DMA_CONFIG_DIR_SHIFT 6
#define DMA_DIR_MEM_TO_PERIPH 1
#define DMA_DIR_PERIPH_TO_MEM 2
#define DMA_MEM_INC_ADDR_SHIFT 10

/ {
    model = "Worldcoin Orb Main MCU";
    compatible = "worldcoin,mcu_main";

    aliases {
        battery-can-bus = &can2;
    };

    chosen {
        zephyr,console = &usart2;
        zephyr,shell-uart = &usart2;
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
        zephyr,canbus = &can1;
    };

    zephyr,user {
        // This is a mux for who controls the audio amp
        // 1 == MCU
        // 0 == Jetson
        sound-amp-mux-gpios = <&gpioe 10 GPIO_ACTIVE_HIGH>;
        i2c_clock_gpios = <&gpioa 15 GPIO_ACTIVE_HIGH>;
        // GPIO used to get hardware version dynamically
        hw-version-gpios = <&gpiob 12 GPIO_ACTIVE_HIGH>;
        jetson_serial = <&usart1>;
        gnss = <&usart3>;
        level-shifter-enable-gpios = <&gpioe 7 GPIO_ACTIVE_HIGH>;
        // To be clear, the enable/disable signal only does something
        // on mainboard versions 3.2+, but this pin is unused on
        // mainboard 3.1, so no harm no foul
        fans-enable-gpios = <&gpiob 13 GPIO_ACTIVE_HIGH>;

        // Hardware rev ADC
        io-channels = <&adc1 11>;
    };

    vbat_sw {
        compatible = "regulator-fixed-sync", "regulator-fixed";
        label = "12V VBAT SW";
        regulator-name = "12v_vbat_sw";
        enable-gpios = <&gpiof 10 GPIO_ACTIVE_HIGH>;

        // This is attached to a MOSFET to allow the battery
        // power to be sent to the inputs of:
        // * 12v supply
        // * 5v supply
        // * Supercap charger
    };

    supply_12v {
        compatible = "regulator-fixed-sync", "regulator-fixed";
        label = "12V Supply";
        regulator-name = "supply_12v";
        enable-gpios = <&gpioe 0 GPIO_ACTIVE_HIGH>;
    };

    supply_5v {
        compatible = "regulator-fixed-sync", "regulator-fixed";
        label = "5V Supply";
        regulator-name = "supply_5v";
        enable-gpios = <&gpiob 1 GPIO_ACTIVE_LOW>;
    };

    supply_3v8 {
        compatible = "regulator-fixed-sync", "regulator-fixed";
        label = "3.8V Supply";
        regulator-name = "supply_3v8";
        enable-gpios = <&gpioe 15 GPIO_ACTIVE_HIGH>;
    };

    supply_3v3 {
        compatible = "regulator-fixed-sync", "regulator-fixed";
        label = "3.3V Supply";
        regulator-name = "supply_3v3";
        enable-gpios = <&gpiod 15 GPIO_ACTIVE_HIGH>;
    };

    supply_1v8 {
        compatible = "regulator-fixed-sync", "regulator-fixed";
        label = "1.8V Supply";
        regulator-name = "supply_1v8";
        enable-gpios = <&gpioe 8 GPIO_ACTIVE_HIGH>;
    };

    supply_pvcc {
        compatible = "regulator-fixed-sync", "regulator-fixed";
        label = "PVCC Supply";
        regulator-name = "supply_pvcc";
        enable-gpios = <&gpioe 6 GPIO_ACTIVE_HIGH>;
    };

    supply_super_cap {
        compatible = "regulator-fixed-sync", "regulator-fixed";
        label = "Super cap supply";
        regulator-name = "supply_super_cap";
        enable-gpios = <&gpioe 4 GPIO_ACTIVE_HIGH>;
    };

    buttons {
        compatible = "gpio-keys";

        power_button {
            gpios = <&gpioc 13 GPIO_ACTIVE_LOW>;
            label = "Power button";
        };
    };

    jetson_power_pins {
        compatible = "gpio-jetson-power";

        shutdown_request {
            // input
            // Jetson module uses this to request a shutdown sequence
            gpios = <&gpiob 7 GPIO_ACTIVE_LOW>;
        };

        power_enable {
            // output
            // this signals the Jetson module to turn on an off
            gpios = <&gpioe 12 GPIO_ACTIVE_HIGH>;
        };

        system_reset {
            // bidirectional
            // drive low to reset
            // driven by Jetson to indicate power sequence is complete
            gpios = <&gpioe 11 GPIO_ACTIVE_LOW>;

        };

        module_sleep {
            // input
            // when driven low indicates that the module has gone to sleep
            gpios = <&gpiof 2 GPIO_ACTIVE_LOW>;
        };

        sleep_wake {
            // output
            // drive high to indicate that the Jetson should enter sleep mode
            gpios = <&gpioe 9 GPIO_ACTIVE_LOW>;
        };
    };

    lte_gps_usb_reset {
        compatible = "gpio-lte-gps-usb";
        gpios = <&gpiod 3 GPIO_ACTIVE_LOW>;
    };

    liquid_lens_en {
        compatible = "gpio-liquid-lens-en";
        gpios = <&gpiod 2 GPIO_ACTIVE_HIGH>;
    };

    hrtim1: hrtim1@40016800 {
        compatible = "st,stm32-hr-timers";
        reg = <0x40016800 0xc00>;
        clocks = <&rcc STM32_CLOCK_BUS_APB2 0x04000000>;
    };

    stm-tmp {
        label = "DIE_TEMP";
        compatible = "st,stm32-temp";
        io-channels = <&adc1 16>;
        status = "okay";
    };

    fan_main {
        compatible = "pwm-fan";
        pwms = <&fan_main_and_aux_pwm 1 40000 PWM_POLARITY_NORMAL>;
    };

    fan_aux {
        compatible = "pwm-fan";
        pwms = <&fan_main_and_aux_pwm 2 40000 PWM_POLARITY_NORMAL>;
    };
};

&rng {
    status = "okay";
};

&adc1 {
    status = "okay";
    pinctrl-0 = <&adc1_in11_pb12>;
    pinctrl-names = "default";
};

// used by liquid_lens module
&adc3 {
    status = "disabled";
    pinctrl-0 = <&adc3_in10_pd13 &adc3_in11_pd14>;
    pinctrl-names = "default";
};

&hrtim1 {
    status = "okay";

    liquid_lens: liquid_lens {
        compatible = "worldcoin,stm32-pwm";
        pinctrl-0 = <&hrtim1_cha1_pa8 &hrtim1_cha2_pa9 &hrtim1_chb1_pa10 &hrtim1_chb2_pa11>;
        pinctrl-names = "default";
    };
};

&timers1 {
    status = "okay";

    operator_rgb_leds: operator_rgb_leds {
        compatible = "worldsemi,ws2812-pwm-stm32";
        label = "operator_rbg_leds";
        pinctrl-0 = <&tim1_ch1_pc0>;
        pinctrl-names = "default";
        timer-channel = <1>;
        timer-number = <1>;
        dma-channel = <1>;
        num-leds = <5>;
    };
};

&timers3 {
    status = "okay";

    led_740nm: led_740nm {
        compatible = "worldcoin,stm32-pwm";
        pinctrl-0 = <&tim3_ch3_pb0>;
        pinctrl-names = "default";
        channels = <3>;
    };

    led_940nm: led_940nm {
        compatible = "worldcoin,stm32-pwm";
        pinctrl-0 = <&tim3_ch1_pe2 &tim3_ch4_pe5>;
        pinctrl-names = "default";
        channels = <1 4>;
    };
};

&timers5 {
    status = "okay";

    fan_main_and_aux_pwm: pwm {
        status = "okay";
        pinctrl-0 = <&tim5_ch1_pb2 &tim5_ch2_pa1>;
        pinctrl-names = "default";
    };
};

&timers8 {
    status = "okay";

    // AKA CAM0
    ir_eye_camera_trigger: ir_eye_camera_trigger {
        compatible = "worldcoin,stm32-pwm";
        pinctrl-0 = <&tim8_ch3_pc8>;
        pinctrl-names = "default";
        channels = <3>;
    };

    // AKA CAM2
    ir_face_camera_trigger: ir_face_camera_trigger {
        compatible = "worldcoin,stm32-pwm";
        pinctrl-0 = <&tim8_ch4_pc9>;
        pinctrl-names = "default";
        channels = <4>;
    };

    // AKA CAM3
    tof_2d_camera_trigger: tof_2d_camera_trigger {
        compatible = "worldcoin,stm32-pwm";
        pinctrl-0 = <&tim8_ch1_pc6>;
        pinctrl-names = "default";
        channels = <1>;
    };
};

&timers15 {
    status = "okay";

    led_850nm: led_850nm {
        compatible = "worldcoin,stm32-pwm";
        pinctrl-0 = <&tim15_ch1_pb14 &tim15_ch2_pb15>;
        pinctrl-names = "default";
        channels = <1 2>;
    };
};

&timers20 {
    status = "okay";

    front_unit_rgb_leds: front_unit_rgb_leds {
        compatible = "worldsemi,ws2812-pwm-stm32";
        label = "front_unit_rgb_leds";
        pinctrl-0 = <&tim20_ch2_pe3>;
        pinctrl-names = "default";
        timer-channel = <2>;
        timer-number = <20>;
        dma-channel = <2>;
        num-leds = <233>;
    };
};

// needed for ws2812, user & operator LEDs, USART
&dma1 {
    status = "okay";
};

&dma2 {
    status = "okay";
};

// needed for ws2812 LEDs
&dmamux1 {
    status = "okay";
};

&clk_hse {
    clock-frequency = <DT_FREQ_M(24)>;
    status = "okay";
};

&pll {
    div-m = <6>;
    mul-n = <85>;
    div-p = <7>;
    div-q = <2>;
    div-r = <2>;
    clocks = <&clk_hse>;
    status = "okay";
};

&rcc {
    clocks = <&pll>;
    clock-frequency = <DT_FREQ_M(170)>;
    ahb-prescaler = <1>;
    apb1-prescaler = <1>;
    apb2-prescaler = <1>;
};

// Jetson
&usart1 {
    pinctrl-0 = <&usart1_tx_pc4 &usart1_rx_pc5>;
    pinctrl-names = "default";
    current-speed = <1000000>;
    status = "okay";

    // DMA1 channels 3 and 4 (1 and 2 used by front and operator LEDs (PWM), 5 and 6 used by GNSS (usart3)).
    dmas = <&dma1 3 DMAMUX_REQ_USART1_RX ((DMA_DIR_PERIPH_TO_MEM << DMA_CONFIG_DIR_SHIFT) | (1 << DMA_MEM_INC_ADDR_SHIFT))>,
           <&dma1 4 DMAMUX_REQ_USART1_TX ((DMA_DIR_MEM_TO_PERIPH << DMA_CONFIG_DIR_SHIFT) | (1 << DMA_MEM_INC_ADDR_SHIFT))>;
    dma-names = "rx", "tx";
};

// debug
&usart2 {
    pinctrl-0 = <&usart2_tx_pd5 &usart2_rx_pd6>;
    pinctrl-names = "default";
    current-speed = <115200>;
    status = "okay";
};

// GNSS module
&usart3 {
    pinctrl-0 = <&usart3_tx_pb10 &usart3_rx_pb11>;
    pinctrl-names = "default";
    current-speed = <9600>;
    status = "okay";

    // DMA1 channels 5 and 6 (1 and 2 used by front and operator LEDs (PWM), 3 and 4 by usart1).
    dmas = <&dma1 5 DMAMUX_REQ_USART3_RX ((DMA_DIR_PERIPH_TO_MEM << DMA_CONFIG_DIR_SHIFT) | (1 << DMA_MEM_INC_ADDR_SHIFT))>,
           <&dma1 6 DMAMUX_REQ_USART3_TX ((DMA_DIR_MEM_TO_PERIPH << DMA_CONFIG_DIR_SHIFT) | (1 << DMA_MEM_INC_ADDR_SHIFT))>;
    dma-names = "rx", "tx";
};

&rtc {
    status = "okay";
};

&i2c1 {
    pinctrl-0 = <&i2c1_scl_pa15 &i2c1_sda_pb9>;
    pinctrl-names = "default";
    status = "okay";

    front_unit_tmp_sensor: tmp112@48 {
        compatible = "ti,tmp112";
        reg = <0x48>;
        label = "FRONT_UNIT_TEMP_SENSOR";
    };

    liquid_lens_tmp_sensor: maxim31875@4a {
        compatible = "maxim,max31875";
        reg = <0x4a>;
        label = "LIQUID_LENS_TEMP_SENSOR";
        conversions-per-second = "1";
        resolution = <8>;
    };

    main_board_tmp_sensor: tmp112@49 {
        compatible = "ti,tmp112";
        reg = <0x49>;
        label = "MAIN_BOARD_TEMP_SENSOR";
    };

    tof_sensor: vl53l1x@29 {
        compatible = "st,vl53l1x";
        reg = <0x29>;
        label = "VL53L1X";
    };
};

&can1 {
    pinctrl-0 = <&fdcan1_rx_pd0 &fdcan1_tx_pd1>;
    pinctrl-names = "default";

    /*
     * 1. Choose the highest available CAN clock frequency: PCLK1 is used
     * 2. Set the BRPA bit-rate prescaler equal BRPB: done within Zephyr
     * 3. Choose BRPA and BRPD as low as possible: done within Zephyr
     * 4. Configure all CAN FD nodes to have the same arbitration phase SP
     *    and the same data phase SP: 85,2%
     * 5. Chose sjwD and sjwA as large as possible: MIN(PS1,PS2). Configuration
     * on the Jetson allows for a maximum of 4. We use 4 to keep the
     * configuration homogeneous (same Tq on all nodes)
     * 6. Enable TDC for data bit-rates higher than 1 Mbit/s
     */
    bus-speed = <125000>;
    sjw = <4>;
    sample-point = <852>;
    bus-speed-data = <1000000>;
    sjw-data = <4>;
    sample-point-data = <853>; // closest value
    status = "okay";
};

// For battery communications
&can2 {
    pinctrl-0 = <&fdcan2_rx_pb5 &fdcan2_tx_pb6>;
    pinctrl-names = "default";
    bus-speed = <1000000>;
    bus-speed-data = <1000000>;
    status = "okay";
};

&spi1 {
    pinctrl-0 = <&spi1_sck_pa5 &spi1_miso_pa6 &spi1_mosi_pa7>;
    pinctrl-names = "default";
    cs-gpios = <&gpioa 3 GPIO_ACTIVE_LOW>;
    status = "okay";

    motion_controller: motion_controller@0 {
        compatible = "tmc,5041-spi";
        label = "tmc_5041_motion_controller";
        reg = <0>;
        spi-max-frequency = <4000000>;
        status = "okay";
    };
};

&flash0 {
    /*
     * Base address: 0x8000000
     * For more information, see:
     * http://docs.zephyrproject.org/latest/guides/dts/index.html#flash-partitions
     */
    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        /* 48KiB for bootloader */
        boot_partition: partition@0 {
            label = "mcuboot";
            reg = <0x00000000 0x0000C000>;
            read-only;
        };

        /* 224KiB per slot */
        // 0x800C000
        slot0_partition: partition@C000 {
            label = "image-0";
            reg = <0x0000C000 0x00038000>;
        };
        // 0x8044000
        slot1_partition: partition@44000 {
            label = "image-1";
            reg = <0x00044000 0x00038000>;
        };

        /* 8KiB scratch */
        scratch_partition: partition@7C000 {
            label = "image-scratch";
            reg = <0x0007C000 0x00002000>;
        };

        /* final 8KiB reserved for app storage partition */
        storage_partition: partition@7E000 {
            label = "storage";
            reg = <0x0007E000 0x00002000>;
        };
    };
};
