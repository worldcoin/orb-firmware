/dts-v1/;
#include <st/g4/stm32g474Xe.dtsi>
#include <st/g4/stm32g474v(b-c-e)tx-pinctrl.dtsi>
#include "../stm32g474-hrtim.dtsi"
#include <zephyr/dt-bindings/spi/spi.h>
#include <zephyr/dt-bindings/dma/stm32_dma.h>
#include <zephyr/dt-bindings/led/led.h>

/// see @file modules/hal/stm32/stm32cube/stm32g4xx/drivers/include/stm32g4xx_ll_dmamux.h
#define LL_DMAMUX_REQ_ADC1            0x00000005U  /*!< DMAMUX ADC1 request        */
#define LL_DMAMUX_REQ_ADC3            0x00000025U  /*!< DMAMUX ADC3 request        */
#define LL_DMAMUX_REQ_ADC4            0x00000026U  /*!< DMAMUX ADC4 request        */
#define LL_DMAMUX_REQ_ADC5            0x00000027U  /*!< DMAMUX ADC5 request        */
#define LL_DMAMUX_REQ_USART1_RX       0x00000018U  /*!< DMAMUX USART1 RX request   */
#define LL_DMAMUX_REQ_USART1_TX       0x00000019U  /*!< DMAMUX USART1 TX request   */
#define LL_DMAMUX_REQ_SPI4_TX         0x0000006BU  /*!< DMAMUX SPI4 TX request     */

#define LL_DMAMUX_CHANNEL_8           0x00000008U  /*!< DMAMUX Channel 8 connected to DMA2 Channel 1  */
#define LL_DMAMUX_CHANNEL_9           0x00000009U  /*!< DMAMUX Channel 9 connected to DMA2 Channel 2  */
#define LL_DMAMUX_CHANNEL_10          0x0000000AU  /*!< DMAMUX Channel 10 connected to DMA2 Channel 3 */
#define LL_DMAMUX_CHANNEL_11          0x0000000BU  /*!< DMAMUX Channel 11 connected to DMA2 Channel 4 */

/// see @file zephyr/dts/bindings/dma/st,stm32-dma-v2.yaml
#define DMA_CONFIG_CYCLIC_SHIFT     5
#define DMA_CONFIG_DIR_SHIFT        6
#define DMA_MEM_INC_ADDR_SHIFT      10

#define DMA_DIR_MEM_TO_PERIPH       1
#define DMA_DIR_PERIPH_TO_MEM       2

/ {
    model = "Main board of the Diamond Orb";
    compatible = "tfh,diamond_main";

    chosen {
        zephyr,flash = &flash0;
        zephyr,sram = &sram0;
        // app in slot0_partition by default
        // the bootloader uses an overlay to redefine this
        zephyr,code-partition = &slot0_partition;
        zephyr,canbus = &fdcan1;
    };

    aliases {
        battery-can-bus = &fdcan2;
        watchdog0 = &iwdg;
        secondary-slot = &slot1_partition;
        spi-flash0 = &w25q32jv;
    };

    zephyr,user {
        jetson-serial = <&usart1>;
        // GPIO used to get hardware version dynamically
        hw-version-main-board-gpios = <&gpio_exp2 8 GPIO_ACTIVE_HIGH>, <&gpio_exp2 9 GPIO_ACTIVE_HIGH>, <&gpio_exp2 10 GPIO_ACTIVE_HIGH>, <&gpio_exp2 11 GPIO_ACTIVE_HIGH>;
        hw-version-front-unit-gpios = <&gpio_exp_front_unit 8 GPIO_ACTIVE_HIGH>, <&gpio_exp_front_unit 9 GPIO_ACTIVE_HIGH>, <&gpio_exp_front_unit 10 GPIO_ACTIVE_HIGH>, <&gpio_exp_front_unit 11 GPIO_ACTIVE_HIGH>;
        hw-version-pwr-board-gpios = <&gpio_exp_pwr_brd 8 GPIO_ACTIVE_HIGH>, <&gpio_exp_pwr_brd 9 GPIO_ACTIVE_HIGH>, <&gpio_exp_pwr_brd 10 GPIO_ACTIVE_HIGH>, <&gpio_exp_pwr_brd 11 GPIO_ACTIVE_HIGH>;
        sound-amp-mux-gpios = <&gpio_exp1 5 GPIO_ACTIVE_HIGH>;
        i2c-clock-gpios = <&gpioa 15 GPIO_ACTIVE_HIGH>;
        front-unit-pvcc-pwm-mode-gpios = <&gpio_exp_pwr_brd 3 GPIO_ACTIVE_LOW>;
        level-shifter-enable-gpios = <&gpioe 7 GPIO_ACTIVE_HIGH>;

        user-led0-3v3-gpios = <&gpio_exp2 0 GPIO_ACTIVE_LOW>;
        user-led1-3v3-gpios = <&gpio_exp2 1 GPIO_ACTIVE_LOW>;

        supply-3v3-ssd-enable-gpios = <&gpio_exp_pwr_brd 2 GPIO_ACTIVE_HIGH>;
        supply-3v3-wifi-enable-gpios = <&gpio_exp1 10 GPIO_ACTIVE_HIGH>;
        supply-5v-enable-gpios = <&gpio_exp_pwr_brd 1 GPIO_ACTIVE_LOW>;
        supply-3v3-enable-gpios = <&gpio_exp1 9 GPIO_ACTIVE_HIGH>;
        supply-1v8-enable-gpios = <&gpio_exp2 3 GPIO_ACTIVE_HIGH>;
        supply-pvcc-enable-gpios = <&gpio_exp_pwr_brd 5 GPIO_ACTIVE_HIGH>;
        supply-super-cap-enable-gpios = <&gpio_exp_pwr_brd 6 GPIO_ACTIVE_HIGH>;
        supply-vbat-sw-enable-gpios = <&gpio_exp_pwr_brd 12 GPIO_ACTIVE_HIGH>;
        front-unit-pvcc-enabled-gpios = <&gpio_exp_front_unit 0 GPIO_ACTIVE_HIGH>;

        polarizer-stepper-direction-gpios = <&gpio_exp1 1 GPIO_ACTIVE_HIGH>;
        polarizer-stepper-enable-gpios = <&gpio_exp1 2 GPIO_ACTIVE_HIGH>;
        polarizer-stepper-encoder-enable-gpios = <&gpio_exp1 3 GPIO_ACTIVE_LOW>;
        polarizer-stepper-encoder-gpios = <&gpioc 11 GPIO_ACTIVE_HIGH>;
        polarizer-stepper-spi-cs-gpios = <&gpio_exp1 0 GPIO_ACTIVE_LOW>;

        // The signals FUSE_RST and FUSE_ACTIVE are available only on Front Unit 6.0 (PoC1) and 6.1 (PoC2)
        // On Front Unit 6.2 (B3) the signal EN_5V_SWITCHED is connected to the port expander pin P02 instead.
        front-unit-fuse-reset-gpios = <&gpio_exp_front_unit 2 GPIO_ACTIVE_LOW>;     // PoC1 & PoC2 only
        front-unit-fuse-active-gpios = <&gpio_exp_front_unit 6 GPIO_ACTIVE_LOW>;    // PoC1 & PoC2 only
        front-unit-en-5v-switched-gpios = <&gpio_exp_front_unit 2 GPIO_ACTIVE_HIGH>;      // B3 only

        supply-12v-caps-enable-gpios = <&gpio_exp_pwr_brd 4 GPIO_ACTIVE_LOW>;
        supply-5v-rgb-enable-gpios = <&gpio_exp_pwr_brd_op 2 GPIO_ACTIVE_HIGH>;
        supply-3v6-enable-gpios = <&gpio_exp2 5 GPIO_ACTIVE_HIGH>;
        supply-3v3-lte-enable-gpios = <&gpio_exp2 15 GPIO_ACTIVE_HIGH>;
        supply-3v3-lte-reset-gpios = <&gpio_exp2 14 GPIO_ACTIVE_LOW>;
        supply-2v8-enable-gpios = <&gpio_exp2 7 GPIO_ACTIVE_HIGH>;

        // used by boot.c when voltage measurements module is not available yet
        pvcc-voltage-gpios = <&gpioc 1 GPIO_ACTIVE_HIGH>;

        tests-ir-leds-850-940-gpios =
            <&gpiof 9 GPIO_ACTIVE_HIGH /* 850nm left */ >,
            <&gpiof 10 GPIO_ACTIVE_HIGH /* 850nm right */ >,
            <&gpioe 2 GPIO_ACTIVE_HIGH /* 940nm center */ >,
            <&gpioe 5 GPIO_ACTIVE_HIGH /* 940nm side */ >;

        debug-led-gpios = <&gpiob 4 GPIO_ACTIVE_LOW>;

        usb-hub-reset-gpios = <&gpio_exp2 2 GPIO_ACTIVE_LOW>;

        // Voltage at VREF+ pin of STM32
        vref-mv = <2048>;
    };

    buttons {
        compatible = "gpio-keys";
        power_button {
            gpios = <&gpioc 13 GPIO_ACTIVE_LOW>;
            label = "Power button";
        };
    };

    jetson_power_pins
    {
        compatible = "gpio-jetson-power";

        shutdown_request
        {
            // input
            // Jetson module uses this to request a shutdown sequence
            gpios = <&gpioe 4 GPIO_ACTIVE_LOW>;
        };

        power_enable
        {
            // output
            // this signals the Jetson module to turn on an off
            gpios = <&gpio_exp2 4 GPIO_ACTIVE_HIGH>;
        };

        system_reset
        {
            // bidirectional
            // drive low to reset
            // driven by Jetson to indicate power sequence is complete
            gpios = <&gpioe 8 GPIO_ACTIVE_LOW>;
        };

        module_sleep
        {
            // input
            // when driven low indicates that the module has gone to sleep
            gpios = <&gpioe 0 GPIO_ACTIVE_LOW>;
        };

        sleep_wake
        {
            // output
            // drive high to indicate that the Jetson should enter sleep mode
            gpios = <&gpioe 9 GPIO_ACTIVE_LOW>;
        };
    };

    fan_main {
        compatible = "pwm-fan";
        pwms = <&fan_pwm 1 40000 PWM_POLARITY_NORMAL>;
        enable-gpios = <&gpio_exp1 6 GPIO_ACTIVE_HIGH>;
    };

    white_leds {
        compatible = "pwm-white-leds";
        pwms = <&white_leds_pwm 2 100000 PWM_POLARITY_NORMAL>;
    };

    polarizer_step {
        compatible = "pwm-polarizer-step";
        pwms = <&polarizer_step_pwm 2 100000 PWM_POLARITY_NORMAL>;
    };

    liquid_lens {
        compatible = "tfh,liquid-lens";

        io-channels = <&adc3 10>, <&adc3 11>, <&adc3 18>;
        io-channel-names = "ina240_ref", "ina240_sig", "vrefint";

        enable-gpios = <&gpio_exp1 7 GPIO_ACTIVE_HIGH>;

        amplifier-gains = <10>;
        shunt-resistor-ohms = "0.15f";
    };

    voltage_measurement {
        compatible = "tfh,voltage-measurement";
        // enable opamps to allow for voltage measurements of the power supplies
        supply-voltages-meas-enable-gpios = <&gpio_exp1 8 GPIO_ACTIVE_LOW>;

        // io-channels = <adc-device channel-number>, ...
        // adc1:
        // [0]: VBAT_SW
        //      Diamond PoC2: R1=94k, R2=10k
        // [1]: 3V3_SSD
        //      Diamond PoC2: R1=10k, R2=10k
        // [2]: 3V3_WIFI
        //      Diamond PoC2: R1=10k, R2=10k
        // [3]: PVCC
        //      Diamond PoC2: R1=442k, R2=23.5k
        // [4]: 12V_CAPS
        //      Diamond PoC2: R1=57k, R2=10k
        // [5]: V_SCAP_LOW
        //      Diamond PoC2
        // [6]: V_SCAP_HIGH
        //      Diamond PoC2
        // [7]: Die Temperature
        // [8]: Vbat / 3
        // adc4:
        // [9]: 1V8_SEC
        //       Diamond PoC2: R1=27R, R2=inf
        // [10]: 4V7_SEC
        //       Diamond PoC2: R1=2*47k, R2=47k
        // adc5:
        // [11]: 1V8
        //       Diamond PoC2: R1=27R, R2=inf
        // [12]: 3V3
        //       Diamond PoC2: R1=10k, R2=10k
        // [13]: 5V
        //       Diamond PoC2: R1=20k, R2=10k
        // [14]: 3V6
        //       Diamond PoC2: R1=10k, R2=10k
        // [15]: 3V3_LTE
        //       Diamond PoC2: R1=10k, R2=10k
        // [16]: 1V2
        //       Diamond PoC2: R1=27R, R2=inf
        // [17]: 2V8
        //       Diamond PoC2: R1=10k, R2=10k
        // [18]: VREFINT (typ. 1.212 V)
        //
        io-channels = <&adc1 1>, <&adc1 2>, <&adc1 3>, <&adc1 7>, <&adc1 9>, <&adc1 11>, <&adc1 14>, <&adc1 16>, <&adc1 17>,<&adc4 1>, <&adc4 2>, <&adc5 7>, <&adc5 8>, <&adc5 9>, <&adc5 12>, <&adc5 13>, <&adc5 14>, <&adc5 15>, <&adc5 18>;
        io-channel-names = "vbat_sw", "3v3_ssd", "3v3_wifi", "pvcc", "12v_caps", "v_scap_low", "v_scap_high", "die_temp", "3v3_uc","1v8_sec", "4v7_sec", "1v8", "3v3", "5v", "3v6", "3v3_lte", "1v2", "2V8", "vrefint";
        voltage-divider-scalings = "10.4f", "2.0f", "2.0f", "19.81f", "6.7f", "1.0f", "1.0f", "1.0f", "3.0f","1.0f", "3.0f", "1.0f", "2.0f", "3.0f", "2.0f", "2.0f", "1.0f", "2.0f", "1.0f";
    };

    i2c-mux-gpio-mainboard {
        compatible = "tfh,i2c-mux-gpio";
        status = "okay";
        #address-cells = <1>;
        #size-cells = <0>;
        mux-gpios = <&gpio_exp1 14 GPIO_ACTIVE_HIGH>, <&gpio_exp1 15 GPIO_ACTIVE_HIGH>;
        enable-gpios = <&gpio_exp1 13 GPIO_ACTIVE_HIGH>;
        i2c-parent = <&i2c1>;

        mux_i2c@0 {
            compatible = "tfh,i2c-mux-gpio-channel";
            status = "okay";
            reg = <0>;
            #address-cells = <1>;
            #size-cells = <0>;

            main_board_tmp_sensor_usb_hub_bot: tmp112@48 {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x48>;
            };

            main_board_tmp_sensor_security_supply: tmp112@49 {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x49>;
            };

            main_board_tmp_sensor_usb_hub_top: tmp112@4a {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x4a>;
            };

            main_board_tmp_sensor_audio_amp: tmp112@4b {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x4b>;
            };
        };

        mux_i2c@1 {
            compatible = "tfh,i2c-mux-gpio-channel";
            status = "okay";
            reg = <1>;
            #address-cells = <1>;
            #size-cells = <0>;

            liquid_lens_tmp_sensor: maxim31875@4a {
                compatible = "maxim,max31875";
                status = "okay";
                reg = <0x4a>;
                conversions-per-second = "1";
                resolution = <8>;
            };
        };
    };

    i2c-mux-gpio-front-unit {
        compatible = "tfh,i2c-mux-gpio";
        status = "okay";
        #address-cells = <1>;
        #size-cells = <0>;
        mux-gpios = <&gpio_exp_front_unit 3 GPIO_ACTIVE_HIGH>, <&gpio_exp_front_unit 4 GPIO_ACTIVE_HIGH>;
        enable-gpios = <&gpio_exp_front_unit 5 GPIO_ACTIVE_HIGH>;
        i2c-parent = <&i2c1>;

        mux_i2c@0 {
            compatible = "tfh,i2c-mux-gpio-channel";
            status = "okay";
            reg = <0>;
            #address-cells = <1>;
            #size-cells = <0>;

            front_unit_tmp_sensor_850_730_left_top: tmp112@48 {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x48>;
            };

            front_unit_tmp_sensor_940_left_top: tmp112@49 {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x49>;
            };

            front_unit_tmp_sensor_850_730_left_bot: tmp112@4a {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x4a>;
            };

            front_unit_tmp_sensor_940_left_bot: tmp112@4b {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x4b>;
            };
        };

        mux_i2c@1 {
            compatible = "tfh,i2c-mux-gpio-channel";
            status = "okay";
            reg = <1>;
            #address-cells = <1>;
            #size-cells = <0>;

            front_unit_tmp_sensor_850_730_right_top: tmp112@48 {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x48>;
            };

            front_unit_tmp_sensor_940_right_top: tmp112@49 {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x49>;
            };

            front_unit_tmp_sensor_940_right_bot: tmp112@4b {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x4b>;
            };
        };

        mux_i2c@3 {
            compatible = "tfh,i2c-mux-gpio-channel";
            status = "okay";
            reg = <3>;
            #address-cells = <1>;
            #size-cells = <0>;

            front_unit_als: bu27030@38 {
                compatible = "rohm,bu27030";
                status = "okay";
                reg = <0x38>;
            };

            front_unit_tmp_sensor_shroud_rgb_top: tmp112@48 {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x48>;
            };

            front_unit_tmp_sensor_white_top: tmp112@49 {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x49>;
            };

            front_unit_tmp_sensor_850_center_top: tmp112@4a {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x4a>;
            };

            front_unit_tmp_sensor_850_center_bot: tmp112@4b {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x4b>;
            };
        };
    };

    i2c-mux-gpio-power-board {
        compatible = "tfh,i2c-mux-gpio";
        status = "okay";
        #address-cells = <1>;
        #size-cells = <0>;
        mux-gpios = <&gpio_exp_pwr_brd 13 GPIO_ACTIVE_HIGH>, <&gpio_exp_pwr_brd 14 GPIO_ACTIVE_HIGH>;
        enable-gpios = <&gpio_exp_pwr_brd 15 GPIO_ACTIVE_HIGH>;
        i2c-parent = <&i2c1>;

        mux_i2c@0 {
            compatible = "tfh,i2c-mux-gpio-channel";
            status = "okay";
            reg = <0>;
            #address-cells = <1>;
            #size-cells = <0>;

            power_board_tmp_sensor_super_cap_charger: tmp112@48 {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x48>;
            };

            power_board_tmp_sensor_pvcc_supply: tmp112@49 {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x49>;
            };

            power_board_tmp_sensor_super_caps_left: tmp112@4a {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x4a>;
            };

            power_board_tmp_sensor_super_caps_right: tmp112@4b {
                compatible = "ti,tmp112";
                status = "okay";
                reg = <0x4b>;
            };
        };
    };

    spi-mux-rgb-led {
        compatible = "tfh,spi-mux-gpio";
        status = "okay";
        #address-cells = <1>;
        #size-cells = <0>;
        mux-gpios = <&gpio_exp_pwr_brd_op 3 GPIO_ACTIVE_HIGH>;
        enable-gpios = <&gpio_exp_pwr_brd_op 4 GPIO_ACTIVE_HIGH>;
        spi-parent = <&spi4>;

        mux_spi_fu: spi@0 {
            compatible = "tfh,spi-mux-gpio-channel";
            status = "okay";
            reg = <0>;
            #address-cells = <1>;
            #size-cells = <0>;

            front_unit_rgb_leds_w:front_unit_rgb_leds_w@0
            {
                compatible = "we,spi-rgb-led";
                reg = <0>;
                spi-max-frequency = <1600000>;
                // 'duplex' option exists but
                // not actually used by the SPI driver
                duplex = <SPI_HALF_DUPLEX>;

                num-leds = <118>;
            };

            front_unit_rgb_leds_apa: front_unit_rgb_leds_apa@1
            {
                compatible = "apa,apa102";
                reg = <1>;
                spi-max-frequency = <2000000>;
                // 'duplex' option exists but
                // not actually used by the SPI driver
                duplex = <SPI_HALF_DUPLEX>;

                chain-length = <118>;
                color-mapping = <LED_COLOR_ID_BLUE
                                 LED_COLOR_ID_GREEN
                                 LED_COLOR_ID_RED>;
            };
        };

        mux_spi_op: spi@1 {
            compatible = "tfh,spi-mux-gpio-channel";
            status = "okay";
            reg = <1>;
            #address-cells = <1>;
            #size-cells = <0>;

            operator_rgb_leds: operator_rgb_leds@1
            {
                compatible = "we,spi-rgb-led";
                reg = <1>;
                spi-max-frequency = <1600000>;
                // 'duplex' option exists but
                // not actually used by the SPI driver
                duplex = <SPI_HALF_DUPLEX>;

                num-leds = <1>;
            };
        };
    };
};

&vbat {
    status = "okay";
};

&adc1 {
    // dmamux1: 8 = dma2,channel 1
    dmas = < &dmamux1 LL_DMAMUX_CHANNEL_8 LL_DMAMUX_REQ_ADC1 (STM32_DMA_PERIPH_TO_MEMORY |
    STM32_DMA_MEM_INC |  STM32_DMA_MEM_16BITS | STM32_DMA_PERIPH_16BITS) >;
    dma-names = "dmamux";

    status = "okay";
    pinctrl-0 = <&adc1_in1_pa0 &adc1_in2_pa1 &adc1_in3_pa2 &adc1_in7_pc1 &adc1_in9_pc3 &adc1_in11_pb12 &adc1_in14_pb11>;
    pinctrl-names = "default";
    st,adc-clock-source = "SYNC";
    st,adc-prescaler = <4>;
    vref-mv = <2048>;

    #address-cells = <1>;
    #size-cells = <0>;

    channel@1 {		// VBAT_SW
        reg = <1>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@2 {		// 3V3_SSD
        reg = <2>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@3 {		// 3V3_WIFI
        reg = <3>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@7 {		// PVCC
        reg = <7>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@9 {		// 12V_CAPS
        reg = <9>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@b {		// V_SCAP_LOW
        reg = <11>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@e {		// V_SCAP_HIGH
        reg = <14>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@10 {	// die temperature
        reg = <16>;
        // Minimum required sampling time is 5 µs according to the datasheet
        // Our ADC is running with 42.5 MHz (AHB = 170 MHz / 4)
        // This means we need to set the sampling time to at least 5 µs * 42.5 MHz = 212.5 ADC Ticks
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 248)>;	// ~5.8 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@11 {	// VBAT / 3 = 3V3_UC / 3
        reg = <17>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 248)>;	// ~5.8 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };
};

&adc3 {
    // used by liquid_lens module
    // dmamux1: 10 = dma2,channel 3
    dmas = < &dmamux1 LL_DMAMUX_CHANNEL_10 LL_DMAMUX_REQ_ADC3 (STM32_DMA_PERIPH_TO_MEMORY |STM32_DMA_MEM_INC |
                           STM32_DMA_MEM_16BITS | STM32_DMA_PERIPH_16BITS) >;
    dma-names = "dmamux";
    status = "okay";
    pinctrl-0 = <&adc3_in10_pd13 &adc3_in11_pd14>;
    pinctrl-names = "default";
    st,adc-clock-source = "SYNC";
    st,adc-prescaler = <4>;
    vref-mv = <2048>;

    #address-cells = <1>;
    #size-cells = <0>;

    channel@a {		// INA240 REF
        reg = <10>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@b {		// INA240 SIG
        reg = <11>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@12 {	// VREFINT (typ. 1.212 V)
        reg = <18>;
        // Minimum required sampling time is 4 µs according to the datasheet
        // Our ADC is running with 42.5 MHz (AHB = 170 MHz / 4)
        // This means we need to set the sampling time to at least 4 µs * 42.5 MHz = 170 ADC Ticks
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 248)>;	// ~5.8 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };
};

&adc4 {
    // dmamux1: 11 = dma2,channel 4
    dmas = < &dmamux1 LL_DMAMUX_CHANNEL_11 LL_DMAMUX_REQ_ADC4 (STM32_DMA_PERIPH_TO_MEMORY |
    STM32_DMA_MEM_INC |  STM32_DMA_MEM_16BITS | STM32_DMA_PERIPH_16BITS) >;
    dma-names = "dmamux";

    status = "okay";
    pinctrl-0 = <&adc4_in1_pe14 &adc4_in2_pe15>;
    pinctrl-names = "default";
    st,adc-clock-source = "SYNC";
    st,adc-prescaler = <4>;
    vref-mv = <2048>;

    #address-cells = <1>;
    #size-cells = <0>;

    channel@1 {		// 1V8_SEC
        reg = <1>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@2 {		// 4V7_SEC
        reg = <2>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };
};

&adc5 {
    // dmamux1: 9 = dma2,ch2
    dmas = < &dmamux1 LL_DMAMUX_CHANNEL_9 LL_DMAMUX_REQ_ADC5 (STM32_DMA_PERIPH_TO_MEMORY |
	STM32_DMA_MEM_INC | STM32_DMA_MEM_16BITS | STM32_DMA_PERIPH_16BITS) >;
    dma-names = "dmamux";
    status = "okay";
    pinctrl-0 = <&adc5_in7_pd10 &adc5_in8_pd11 &adc5_in9_pd12 &adc5_in12_pd8 &adc5_in13_pd9 &adc5_in14_pe10 &adc5_in15_pe11>;
    pinctrl-names = "default";
    st,adc-clock-source = "SYNC";
    st,adc-prescaler = <4>;
    vref-mv = <2048>;

    #address-cells = <1>;
    #size-cells = <0>;

    channel@7 {		// 1V8
        reg = <7>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@8 {		// 3V3
        reg = <8>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@9 {		// 5V
        reg = <9>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@c {		// 3V6
        reg = <12>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@d {	        // 3V3_LTE
        reg = <13>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@e {		// 1V2
        reg = <14>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@f {		// 2V8
        reg = <15>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@12 {	// VREFINT (typ. 1.212 V)
        reg = <18>;
        // Minimum required sampling time is 4 µs according to the datasheet
	    // Our ADC is running with 42.5 MHz (AHB = 170 MHz / 4)
	    // This means we need to set the sampling time to at least 4 µs * 42.5 MHz = 170 ADC Ticks
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 248)>;	// ~5.8 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };
};

&rng {
    clocks = <&rcc STM32_CLOCK_BUS_AHB2 0x04000000>,
             <&rcc STM32_SRC_HSI48 CLK48_SEL(0)>; // domain clock
    status = "okay";
};

&hrtim1 {
    status = "okay";

    liquid_lens: liquid_lens {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&hrtim1_cha1_pa8 &hrtim1_cha2_pa9 &hrtim1_chb1_pa10 &hrtim1_chb2_pa11>;
        pinctrl-names = "default";
    };
};

&timers2 {
    status = "okay";
    interrupts = <28 0>;
    interrupt-names = "global";

    fan_main_tach: fan_main_tach {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&tim2_ch3_pd7>;
        pinctrl-names = "default";
        channels = <3>;
    };

    polarizer_step_pwm: pwm {
        status = "okay";
        pinctrl-0 = <&tim2_ch2_pd4>;
        pinctrl-names = "default";
    };
};

&timers3 {
    status = "okay";

    led_940nm: led_940nm {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&tim3_ch1_pe2 &tim3_ch4_pe5 &tim3_ch3_pb0>;
        pinctrl-names = "default";
        channels = <1 4 3>;
    };
};

&timers4 {
    status = "okay";

    ir_camera_system_master_timer: ir_camera_system_master_timer {
        compatible = "tfh,stm32-pwm";
        pinctrl-names = "default";
        pinctrl-0 = <>;
        channels = <1>;
    };
};

&timers5 {
    status = "okay";

    fan_pwm: pwm {
        status = "okay";
        pinctrl-0 = <&tim5_ch1_pb2>;
        pinctrl-names = "default";
    };
};

&timers8 {
    status = "okay";

    white_leds_pwm: pwm {
        status = "okay";
        pinctrl-0 = <&tim8_ch2_pc7>;
        pinctrl-names = "default";
    };
};

&timers15 {
    status = "okay";

    led_850nm: led_850nm {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&tim15_ch1_pf9 &tim15_ch2_pf10>;
        pinctrl-names = "default";
        channels = <1 2>;
    };
};

&timers20 {
    status = "okay";

    // AKA CAM0_IREYE
    ir_eye_camera_trigger: ir_eye_camera_trigger {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&tim20_ch3_pf2>;
        pinctrl-names = "default";
        channels = <3>;
    };

    // AKA CAM2_IRFACE
    ir_face_camera_trigger: ir_face_camera_trigger {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&tim20_ch4_pe1>;
        pinctrl-names = "default";
        channels = <4>;
    };

    // AKA CAM3_TOF
    tof_2d_camera_trigger: tof_2d_camera_trigger {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&tim20_ch2_pe3>;
        pinctrl-names = "default";
        channels = <1>;
    };
};

&dma1 {
    // usart1 & spi4
    status = "okay";
};

&dma2 {
    // ADC sampling (through dmamux)
    status = "okay";
};

&dmamux1 {
    // ADC sampling
    status = "okay";
};

&clk_hse {
    clock-frequency = <DT_FREQ_M(24)>;
    status = "okay";
};

&clk_hsi48 {
    status = "okay";
};

&pll {
    div-m = <6>;
    mul-n = <85>;
    div-p = <7>;
    div-q = <2>;
    div-r = <2>;
    clocks = <&clk_hse>;
    status = "okay";
};

&rcc {
    clocks = <&pll>;
    clock-frequency = <DT_FREQ_M(170)>;
    ahb-prescaler = <1>;
    apb1-prescaler = <1>;
    apb2-prescaler = <1>;
};

// Jetson
&usart1 {
    pinctrl-0 = <&usart1_tx_pc4 &usart1_rx_pc5>;
    pinctrl-names = "default";
    current-speed = <1000000>;
    status = "okay";

    dmas = <&dma1 3 LL_DMAMUX_REQ_USART1_RX (STM32_DMA_PERIPH_RX | STM32_DMA_MEM_8BITS | STM32_DMA_MODE_CYCLIC)>,
           <&dma1 4 LL_DMAMUX_REQ_USART1_TX (STM32_DMA_PERIPH_TX)>;
    dma-names = "rx", "tx";
    fifo-enable;
};

// debug
&usart2 {
    pinctrl-0 = <&usart2_tx_pd5 &usart2_rx_pd6>;
    pinctrl-names = "default";
    current-speed = <115200>;
    status = "disabled"; // enable with overlay
};

&rtc {
    status = "okay";
};

&i2c1 {
    pinctrl-0 = <&i2c1_scl_pa15 &i2c1_sda_pb9>;
    pinctrl-names = "default";
    status = "okay";
    zephyr,deferred-init;

    tof_sensor: vl53l1x@29 {
        compatible = "st,vl53l1x";
        reg = <0x29>;
    };

    // io-expander on the front unit 0x23
    gpio_exp_front_unit: pca95xx@23 {
        compatible = "nxp,pca95xx";
        zephyr,deferred-init;

        reg = <0x23>;
        gpio-controller;
        #gpio-cells = <2>;
        ngpios = <16>;
    };
};

&i2c3 {
    pinctrl-0 = <&i2c3_scl_pc8 &i2c3_sda_pc9>;
    pinctrl-names = "default";
    status = "okay";

    // io-expander on the power board 0x20
    gpio_exp_pwr_brd: pca95xx@20 {
        compatible = "nxp,pca95xx";
        reg = <0x20>;
        gpio-controller;
        #gpio-cells = <2>;
        ngpios = <16>;
    };

    // io-expander on the main board 0x21
    gpio_exp1: pca95xx@21 {
        compatible = "nxp,pca95xx";
        reg = <0x21>;
        gpio-controller;
        #gpio-cells = <2>;
        ngpios = <16>;
    };

    // io-expander on the main board 0x22
    gpio_exp2: pca95xx@22 {
        compatible = "nxp,pca95xx";
        reg = <0x22>;
        gpio-controller;
        #gpio-cells = <2>;
        ngpios = <16>;
    };

    // io-expander on the power board 0x23
    // connected to operator board
    gpio_exp_pwr_brd_op: pca95xx@23 {
        compatible = "nxp,pca95xx";
        reg = <0x23>;
        gpio-controller;
        #gpio-cells = <2>;
        ngpios = <16>;
    };
};

&i2c4 {
    pinctrl-0 = <&i2c4_scl_pc6 &i2c4_sda_pb7>;
    pinctrl-names = "default";
    status = "okay";

    bq4050:bq4050@b{
        reg = <0x0b>;
        compatible = "ti,bq4050";
    };

    // apply cone.overlay to add cone components
};

&fdcan1 {
    pinctrl-0 = <&fdcan1_rx_pd0 &fdcan1_tx_pd1>;
    pinctrl-names = "default";

    /*
     * 1. Choose the highest available CAN clock frequency: PCLK1 is used
     * 2. Set the BRPA bit-rate prescaler equal BRPB: done within Zephyr
     * 3. Choose BRPA and BRPD as low as possible: done within Zephyr
     * 4. Configure all CAN FD nodes to have the same arbitration phase SP
     *    and the same data phase SP: 85,2%
     * 5. Chose sjwD and sjwA as large as possible: MIN(PS1,PS2). Configuration
     * on the Jetson allows for a maximum of 4. We use 4 to keep the
     * configuration homogeneous (same Tq on all nodes)
     * 6. Enable TDC for data bit-rates higher than 1 Mbit/s
     */
    bitrate = <1000000>;
    sample-point = <853>;
    bitrate-data = <1000000>;
    sample-point-data = <853>; // closest value
    status = "okay";
};

&spi1 {
    pinctrl-0 = <&spi1_sck_pa5 &spi1_miso_pa6 &spi1_mosi_pa7>;
    pinctrl-names = "default";
    cs-gpios = <&gpioa 3 GPIO_ACTIVE_LOW>;
    status = "okay";

    motion_controller: motion_controller@0 {
        compatible = "tmc,5041-spi";
        reg = <0>;
        spi-max-frequency = <4000000>;
        status = "okay";
    };

    polarizer_controller: polarizer_controller@1 {
        compatible = "zephyr,spi-device";
        reg = <1>;  /* This will use the I/O expander CS */
        spi-max-frequency = <4000000>;
        status = "okay";
    };
};

&spi2 {
    pinctrl-0 = <&spi2_sck_pb13 &spi2_miso_pb14 &spi2_mosi_pb15>;
    pinctrl-names = "default";
    cs-gpios = <&gpiod 15 GPIO_ACTIVE_LOW>;
    status = "okay";

    w25q32jv: w25q32jv@0 {
        compatible = "jedec,spi-nor";
        reg = <0>;
        spi-max-frequency = <40000000>;
        size = <0x2000000>;
        has-dpd;
        t-enter-dpd = <3000>;
        t-exit-dpd = <30000>;
        jedec-id = [ ef 40 16 ];
    };
};

&spi4 {
    pinctrl-0 = <&spi4_sck_pe12 &spi4_mosi_pe6>;
    pinctrl-names = "default";

    dmas = <&dma1 1 LL_DMAMUX_REQ_SPI4_TX ((DMA_DIR_MEM_TO_PERIPH << DMA_CONFIG_DIR_SHIFT) | (1 << DMA_MEM_INC_ADDR_SHIFT))>;
    dma-names = "tx";

    status = "okay";
};

&iwdg {
    status = "okay";
};

&w25q32jv {
    status = "okay";

    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        /* 448KiB for app image, secondary slot */
        slot1_partition: partition@0 {
            label = "image-1";
            reg = <0x0 DT_SIZE_K(448)>;
        };

        /* 8KiB reserved for app storage partition */
        storage_partition: partition@7E000 {
            label = "storage";
            reg = <0x0007E000 DT_SIZE_K(8)>;
        };

        /* 8KiB reserved for configuration partition */
        config_partition: partition@7F000 {
            label = "config";
            reg = <0x0007F000 DT_SIZE_K(8)>;
        };
    };
};

&flash0 {
    /*
     * Base address: 0x8000000
     * For more information, see:
     * http://docs.zephyrproject.org/latest/guides/dts/index.html#flash-partitions
     */
    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        /*
         *    48KiB for bootloader (mcuboot)
         * + 448KiB for app image
         * +  16KiB scratch area for mcuboot
         * ================================
         * 512KiB total
         */
        boot_partition: partition@0 {
            label = "mcuboot";
            reg = <0x00000000 DT_SIZE_K(48)>;
            read-only;
        };

        slot0_partition: partition@C000 {
            label = "image-0";
            reg = <0x0000C000 DT_SIZE_K(448)>;
        };

        scratch_partition: partition@7C000 {
            label = "image-scratch";
            reg = <0x0007C000 DT_SIZE_K(16)>;
        };
    };
};
