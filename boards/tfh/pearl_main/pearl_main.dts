/dts-v1/;
#include <st/g4/stm32g474Xe.dtsi>
#include <st/g4/stm32g474v(b-c-e)tx-pinctrl.dtsi>
#include "../stm32g474-hrtim.dtsi"

// see stm32g4xx_ll_dmamux.h
#define DMAMUX_REQ_USART1_RX 0x18
#define DMAMUX_REQ_USART1_TX 0x19
#define DMAMUX_REQ_USART3_RX 0x1C
#define DMAMUX_REQ_USART3_TX 0x1D

#define DMA_CONFIG_DIR_SHIFT 6
#define DMA_DIR_MEM_TO_PERIPH 1
#define DMA_DIR_PERIPH_TO_MEM 2
#define DMA_MEM_INC_ADDR_SHIFT 10

#define DMA_CONFIG_CYCLIC_SHIFT  5
#define DMA_CONFIG_CIRCULAR_MODE  1


/ {
    model = "Main board of the Pearl Orb";
    compatible = "tfh,pearl_main";

    chosen {
        // app in slot0_partition by default
        // the bootloader uses an overlay to redefine this
        zephyr,code-partition = &slot0_partition;

        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
        zephyr,canbus = &fdcan1;
    };

    aliases {
        battery-can-bus = &fdcan2;
        watchdog0 = &iwdg;
        secondary-slot = &slot1_partition;
    };

    zephyr,user {
        front-unit-pvcc-pwm-mode-gpios = <&gpiof 9 GPIO_ACTIVE_LOW>;
        // This is a mux for who controls the audio amp
        // 1 == MCU

        // 0 == Jetson
        sound-amp-mux-gpios = <&gpioe 10 GPIO_ACTIVE_HIGH>;
        i2c_clock_gpios = <&gpioa 15 GPIO_ACTIVE_HIGH>;
        // GPIO used to get hardware version dynamically
        hw-version-gpios = <&gpiob 12 GPIO_ACTIVE_HIGH>;
        jetson_serial = <&usart1>;
        gnss = <&usart3>;
        level-shifter-enable-gpios = <&gpioe 7 GPIO_ACTIVE_HIGH>;
        // enable pin for +3V8 converter on EV1...4, RFID_IRQ on EV5
        supply-3v8-enable-rfid-irq-gpios = <&gpioe 15 GPIO_ACTIVE_HIGH>;
        // enable pin for +3V3_SSD and +3V3_WIFI only on EV5
        supply-3v3-ssd-enable-gpios = <&gpioa 2 GPIO_ACTIVE_HIGH>;
        supply-3v3-wifi-enable-gpios = <&gpioc 11 GPIO_ACTIVE_HIGH>;
        supply-12v-enable-gpios = <&gpioe 0 GPIO_ACTIVE_HIGH>;
        supply-5v-enable-gpios = <&gpiob 1 GPIO_ACTIVE_LOW>;
        supply-3v3-enable-gpios = <&gpiod 15 GPIO_ACTIVE_HIGH>;
        supply-1v8-enable-gpios = <&gpioe 8 GPIO_ACTIVE_HIGH>;
        supply-pvcc-enable-gpios = <&gpioe 6 GPIO_ACTIVE_HIGH>;
        supply-super-cap-enable-gpios = <&gpioe 4 GPIO_ACTIVE_HIGH>;
        supply-vbat-sw-enable-gpios = <&gpiof 10 GPIO_ACTIVE_HIGH>;

        // used by boot.c when voltage measurements module is not available yet
        pvcc-voltage-gpios = <&gpioc 1 GPIO_ACTIVE_HIGH>;

        tests-ir-leds-850-940-gpios =
            <&gpiob 14 GPIO_ACTIVE_HIGH /* 850nm left */ >,
            <&gpiob 15 GPIO_ACTIVE_HIGH /* 850nm right */ >,
            <&gpioe 2 GPIO_ACTIVE_HIGH /* 940nm left */ >,
            <&gpioe 5 GPIO_ACTIVE_HIGH /* 940nm right */ >;
        front-unit-pvcc-enabled-gpios = <&gpioc 10 GPIO_ACTIVE_LOW>;

        debug-led-gpios = <&gpiob 4 GPIO_ACTIVE_LOW>;

        // Voltage at VREF+ pin on EV5 hardware (in contrast VREF+ is connected to VDD on EV1...4)
        ev5-vref-mv = <2048>;

        // VREF+ is connected to VDD on EV1...4
        ev1-vref-mv = <3300>;
    };

    buttons {
        compatible = "gpio-keys";

        power_button {
            gpios = <&gpioc 13 GPIO_ACTIVE_LOW>;
            label = "Power button";
        };
    };

    jetson_power_pins {
        compatible = "gpio-jetson-power";

        shutdown_request {
            // input
            // Jetson module uses this to request a shutdown sequence
            gpios = <&gpiob 7 GPIO_ACTIVE_LOW>;
        };

        power_enable {
            // output
            // this signals the Jetson module to turn on an off
            gpios = <&gpioe 12 GPIO_ACTIVE_HIGH>;
        };

        system_reset {
            // bidirectional
            // drive low to reset
            // driven by Jetson to indicate power sequence is complete
            gpios = <&gpioe 11 GPIO_ACTIVE_LOW>;

        };

        module_sleep {
            // input
            // when driven low indicates that the module has gone to sleep
            gpios = <&gpiof 2 GPIO_ACTIVE_LOW>;
        };

        sleep_wake {
            // output
            // drive high to indicate that the Jetson should enter sleep mode
            gpios = <&gpioe 9 GPIO_ACTIVE_LOW>;
        };
    };

    lte_gps_usb_reset {
        compatible = "gpio-lte-gps-usb";
        gpios = <&gpiod 3 GPIO_ACTIVE_LOW>;
    };

    fan_main {
        compatible = "pwm-fan";
        pwms = <&fan_main_and_aux_pwm 1 40000 PWM_POLARITY_NORMAL>;

        // To be clear, the enable/disable signal only does something
        // on mainboard versions 3.2+, but this pin is unused on
        // mainboard 3.1, so no harm no foul
        enable-gpios = <&gpiob 13 GPIO_ACTIVE_HIGH>;
    };

    fan_aux {
        compatible = "pwm-fan";
        pwms = <&fan_main_and_aux_pwm 2 40000 PWM_POLARITY_NORMAL>;

        // To be clear, the enable/disable signal only does something
        // on mainboard versions 3.2+, but this pin is unused on
        // mainboard 3.1, so no harm no foul
        enable-gpios = <&gpiob 13 GPIO_ACTIVE_HIGH>;
    };

    board_version {
        compatible = "tfh,board-version";
        io-channels = <&adc1 11>;
    };

    liquid_lens {
        compatible = "tfh,liquid-lens";

        io-channels = <&adc3 10>, <&adc3 11>, <&adc3 18>;
        io-channel-names = "ina240_ref", "ina240_sig", "vrefint";

        enable-gpios = <&gpiod 2 GPIO_ACTIVE_HIGH>;

        // array: EV1..4, EV5
        amplifier-gains = <20>, <10>;
        shunt-resistor-ohms = "0.15f", "0.15f";
    };

    voltage_measurement {
        compatible = "tfh,voltage-measurement";

        // enable opamps to allow for voltage measurements of the power supplies
        supply-voltages-meas-enable-gpios = <&gpioe 1 GPIO_ACTIVE_LOW>;

        // io-channels = <adc-device channel-number>, ...
        // adc1:
        // [0]: VBAT_SW
        //      EV1...4: R1=442k, R2=100k
        // [1]: PVCC
        //      EV1...4: R1=442k, R2=47k
        // [2]: 12V
        //      EV1...4: R1=47k, R2=10k
        // [3]: 12V_CAPS
        //      EV1...4: R1=47k, R2=10k
        // [4]: Die Temperature
        // [5]: Vbat / 3
        // adc5:
        // [6]: 1V8
        //      EV1...4: R1=27R, R2=inf
        // [7]: 3V3
        //      EV1...4: R1=10k, R2=47k
        // [8]: 5V
        //      EV1...4: R1=10k, R2=10k
        // [9]: 3V3_SSD (EV5) / 3V8 (EV1…EV4)
        //      EV1...4: R1=10k, R2=47k
        // [10]: VREFINT (typ. 1.212 V)
        io-channels = <&adc1 1>, <&adc1 7>, <&adc1 8>, <&adc1 9>, <&adc1 16>, <&adc1 17>, <&adc5 7>, <&adc5 8>, <&adc5 9>, <&adc5 13>, <&adc5 18>;
        io-channel-names = "vbat_sw", "pvcc", "12v", "12v_caps", "die_temp", "3v3_uc", "1v8", "3v3", "5v", "3v3_ssd_3v8", "vrefint";
        voltage-divider-scalings = "5.42f", "10.40f", "5.7f", "5.7f", "1.0f", "3.0f", "1.0f", "1.213f", "2.0f", "1.213f", "1.0f";
    };

    voltage_measurement_ev5 {
        compatible = "tfh,voltage-measurement";

        // enable opamps to allow for voltage measurements of the power supplies
        supply-voltages-meas-enable-gpios = <&gpioe 1 GPIO_ACTIVE_LOW>;

        // io-channels = <adc-device channel-number>, ...
        // adc1:
        // [0]: VBAT_SW
        //      EV5: R1=94k, R2=10k
        // [1]: PVCC
        //      EV5: R1=442k, R2=23.5k
        // [2]: 12V
        //      EV5: R1=57k, R2=10k
        // [3]: 12V_CAPS
        //      EV5: R1=57k, R2=10k
        // [4]: Die Temperature
        // [5]: Vbat / 3
        // adc5:
        // [6]: 1V8
        //      EV5: R1=27R, R2=inf
        // [7]: 3V3
        //      EV5: R1=10k, R2=10k
        // [8]: 5V
        //      EV5: R1=20k, R2=10k
        // [9]: 3V3_SSD (EV5) / 3V8 (EV1…EV4)
        //      EV5: R1=10k, R2=10k
        // [10]: VREFINT (typ. 1.212 V)
        io-channels = <&adc1 1>, <&adc1 7>, <&adc1 8>, <&adc1 9>, <&adc1 16>, <&adc1 17>, <&adc5 7>, <&adc5 8>, <&adc5 9>, <&adc5 13>, <&adc5 18>;
        io-channel-names = "vbat_sw", "pvcc", "12v", "12v_caps", "die_temp", "3v3_uc", "1v8", "3v3", "5v", "3v3_ssd_3v8", "vrefint";
        voltage-divider-scalings = "10.4f", "19.81f", "6.7f", "6.7f", "1.0f", "3.0f", "1.0f", "2.0f", "3.0f", "2.0f", "1.0f";
    };
};

&rng {
    clocks = <&rcc STM32_CLOCK_BUS_AHB2 0x04000000>,
             <&rcc STM32_SRC_HSI48 CLK48_SEL(0)>; // domain clock
    status = "okay";
};

&vbat {
    status = "okay";
};

// used to measure battery voltage, hardware revision
// & die temperature (channel 16)
&adc1 {
    // dmamux1: 7 = dma-channel 8; 5 = DMA request MUX input (ADC1) from reference manual RM0440
    dmas = < &dmamux1 7 5 (STM32_DMA_PERIPH_TO_MEMORY |
    STM32_DMA_MEM_INC |  STM32_DMA_MEM_16BITS | STM32_DMA_PERIPH_16BITS) >;
    dma-names = "dmamux";

    status = "okay";
    pinctrl-0 = <&adc1_in1_pa0 &adc1_in7_pc1 &adc1_in8_pc2 &adc1_in9_pc3 &adc1_in11_pb12>;
    pinctrl-names = "default";
    st,adc-clock-source = <SYNC>;
    st,adc-prescaler = <4>;
    vref-mv = <3300>;

    #address-cells = <1>;
    #size-cells = <0>;

    channel@1 {		// VBAT_SW
        reg = <1>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@7 {		// PVCC
        reg = <7>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@8 {		// 12V
        reg = <8>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@9 {		// 12V_CAPS
        reg = <9>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@b {	        // HW_VERSION
        reg = <11>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@10 {	// die temperature
        reg = <16>;
        // Minimum required sampling time is 5 µs according to the datasheet
        // Our ADC is running with 42.5 MHz (AHB = 170 MHz / 4)
        // This means we need to set the sampling time to at least 5 µs * 42.5 MHz = 212.5 ADC Ticks
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 248)>;	// ~5.8 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@11 {	// VBAT / 3 = 3V3_UC / 3
        reg = <17>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 248)>;	// ~5.8 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };
};

// used by liquid_lens module
&adc3 {
    // dmamux1: 10 = dma-channel 11; 37 = DMA request MUX input (ADC3) from reference manual RM0440
    dmas = < &dmamux1 10 37 (STM32_DMA_PERIPH_TO_MEMORY |STM32_DMA_MEM_INC |
                           STM32_DMA_MEM_16BITS | STM32_DMA_PERIPH_16BITS) >;
    dma-names = "dmamux";
    status = "okay";
    pinctrl-0 = <&adc3_in10_pd13 &adc3_in11_pd14>;
    pinctrl-names = "default";
    st,adc-clock-source = <SYNC>;
    st,adc-prescaler = <4>;
    vref-mv = <3300>;

    #address-cells = <1>;
    #size-cells = <0>;

    channel@a {		// INA240 REF
        reg = <10>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@b {		// INA240 SIG
        reg = <11>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@12 {	// VREFINT (typ. 1.212 V)
        reg = <18>;
        // Minimum required sampling time is 4 µs according to the datasheet
        // Our ADC is running with 42.5 MHz (AHB = 170 MHz / 4)
        // This means we need to set the sampling time to at least 4 µs * 42.5 MHz = 170 ADC Ticks
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 248)>;	// ~5.8 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };
};

&adc5 {
    // dmamux1: 9 = dma-channel 10; 39 = DMA request MUX input (ADC5) from reference manual RM0440
    dmas = < &dmamux1 9 39 (STM32_DMA_PERIPH_TO_MEMORY |
	STM32_DMA_MEM_INC |  STM32_DMA_MEM_16BITS | STM32_DMA_PERIPH_16BITS) >;
    dma-names = "dmamux";
    status = "okay";
    pinctrl-0 = <&adc5_in7_pd10 &adc5_in8_pd11 &adc5_in9_pd12 &adc5_in13_pd9>;
    pinctrl-names = "default";
    st,adc-clock-source = <SYNC>;
    st,adc-prescaler = <4>;
    vref-mv = <3300>;

    #address-cells = <1>;
    #size-cells = <0>;

    channel@7 {		// 1V8
        reg = <7>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@8 {		// 3V3
        reg = <8>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@9 {		// 5V
        reg = <9>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@d {	        // 3V3_SSD (EV5) / 3V8 (EV1…EV4)
        reg = <13>;
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 48)>;	// ~1.1 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };

    channel@12 {	// VREFINT (typ. 1.212 V)
        reg = <18>;
        // Minimum required sampling time is 4 µs according to the datasheet
	// Our ADC is running with 42.5 MHz (AHB = 170 MHz / 4)
	// This means we need to set the sampling time to at least 4 µs * 42.5 MHz = 170 ADC Ticks
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_TICKS, 248)>;	// ~5.8 µs @ ADC_CLK = 42.5 MHz
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,resolution = <12>;
    };
};

&hrtim1 {
    status = "okay";

    liquid_lens: liquid_lens {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&hrtim1_cha1_pa8 &hrtim1_cha2_pa9 &hrtim1_chb1_pa10 &hrtim1_chb2_pa11>;
        pinctrl-names = "default";
    };
};

&timers1 {
    status = "okay";

    operator_rgb_leds: operator_rgb_leds {
        compatible = "worldsemi,ws2812-pwm-stm32";
        pinctrl-0 = <&tim1_ch1_pc0>;
        pinctrl-names = "default";
        timer-channel = <1>;
        timer-number = <1>;
        dma-channel = <1>;
        num-leds = <5>;
    };
};

&timers2 {
    status = "okay";

    fan_main_tach: fan_main_tach {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&tim2_ch3_pd7>;
        pinctrl-names = "default";
        channels = <3>;
    };
};

&timers3 {
    status = "okay";

    led_940nm: led_940nm {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&tim3_ch1_pe2 &tim3_ch4_pe5>;
        pinctrl-names = "default";
        channels = <1 4>;
    };
};

&timers4 {
    status = "okay";

    ir_camera_system_master_timer: ir_camera_system_master_timer {
        compatible = "tfh,stm32-pwm";
        pinctrl-names = "default";
        pinctrl-0 = <>;
        channels = <1>;
    };
};

&timers5 {
    status = "okay";

    fan_main_and_aux_pwm: pwm {
        status = "okay";
        pinctrl-0 = <&tim5_ch1_pb2 &tim5_ch2_pa1>;
        pinctrl-names = "default";
    };
};

&timers8 {
    status = "okay";

    // AKA CAM0
    ir_eye_camera_trigger: ir_eye_camera_trigger {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&tim8_ch3_pc8>;
        pinctrl-names = "default";
        channels = <3>;
    };

    // AKA CAM2
    ir_face_camera_trigger: ir_face_camera_trigger {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&tim8_ch4_pc9>;
        pinctrl-names = "default";
        channels = <4>;
    };

    // AKA CAM3
    tof_2d_camera_trigger: tof_2d_camera_trigger {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&tim8_ch1_pc6>;
        pinctrl-names = "default";
        channels = <1>;
    };
};

&timers15 {
    status = "okay";

    led_850nm: led_850nm {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&tim15_ch1_pb14 &tim15_ch2_pb15>;
        pinctrl-names = "default";
        channels = <1 2>;
    };
};

&timers16 {
    status = "okay";

    fan_aux_tach: fan_aux_tach {
        compatible = "tfh,stm32-pwm";
        pinctrl-0 = <&tim16_ch1_pa12>;
        pinctrl-names = "default";
        channels = <1>;
    };
};

&timers20 {
    status = "okay";

    front_unit_rgb_leds_w: front_unit_rgb_leds_w {
        compatible = "worldsemi,ws2812-pwm-stm32";
        pinctrl-0 = <&tim20_ch2_pe3>;
        pinctrl-names = "default";
        timer-channel = <2>;
        timer-number = <20>;
        dma-channel = <2>;
        num-leds = <233>;
    };
};

// needed for ws2812, user & operator LEDs, USART
&dma1 {
    status = "okay";
};

&dma2 {
    status = "okay";
};

// needed for ws2812 LEDs
&dmamux1 {
    status = "okay";
};

&clk_hse {
    clock-frequency = <DT_FREQ_M(24)>;
    status = "okay";
};

&clk_hsi48 {
    status = "okay";
};

&pll {
    div-m = <6>;
    mul-n = <85>;
    div-p = <7>;
    div-q = <2>;
    div-r = <2>;
    clocks = <&clk_hse>;
    status = "okay";
};

&rcc {
    clocks = <&pll>;
    clock-frequency = <DT_FREQ_M(170)>;
    ahb-prescaler = <1>;
    apb1-prescaler = <1>;
    apb2-prescaler = <1>;
};

// Jetson
&usart1 {
    pinctrl-0 = <&usart1_tx_pc4 &usart1_rx_pc5>;
    pinctrl-names = "default";
    current-speed = <1000000>;
    status = "okay";

    // DMA1 channels 3 and 4 (1 and 2 used by front and operator LEDs (PWM), 5 and 6 used by GNSS (usart3)).
    dmas = <&dma1 3 DMAMUX_REQ_USART1_RX ((DMA_DIR_PERIPH_TO_MEM << DMA_CONFIG_DIR_SHIFT) | (1 << DMA_MEM_INC_ADDR_SHIFT) | (DMA_CONFIG_CIRCULAR_MODE << DMA_CONFIG_CYCLIC_SHIFT))>,
           <&dma1 4 DMAMUX_REQ_USART1_TX ((DMA_DIR_MEM_TO_PERIPH << DMA_CONFIG_DIR_SHIFT) | (1 << DMA_MEM_INC_ADDR_SHIFT) | (DMA_CONFIG_CIRCULAR_MODE << DMA_CONFIG_CYCLIC_SHIFT))>;
    dma-names = "rx", "tx";
};

// debug
&usart2 {
    pinctrl-0 = <&usart2_tx_pd5 &usart2_rx_pd6>;
    pinctrl-names = "default";
    current-speed = <115200>;
    status = "disabled";
};

// GNSS module
&usart3 {
    pinctrl-0 = <&usart3_tx_pb10 &usart3_rx_pb11>;
    pinctrl-names = "default";
    current-speed = <9600>;
    status = "okay";

    // DMA1 channels 5 and 6 (1 and 2 used by front and operator LEDs (PWM), 3 and 4 by usart1).
    dmas = <&dma1 5 DMAMUX_REQ_USART3_RX ((DMA_DIR_PERIPH_TO_MEM << DMA_CONFIG_DIR_SHIFT) | (1 << DMA_MEM_INC_ADDR_SHIFT))>,
           <&dma1 6 DMAMUX_REQ_USART3_TX ((DMA_DIR_MEM_TO_PERIPH << DMA_CONFIG_DIR_SHIFT) | (1 << DMA_MEM_INC_ADDR_SHIFT))>;
    dma-names = "rx", "tx";
};

&rtc {
    status = "okay";
};

&i2c1 {
    pinctrl-0 = <&i2c1_scl_pa15 &i2c1_sda_pb9>;
    pinctrl-names = "default";
    status = "okay";

    front_unit_tmp_sensor: tmp112@48 {
        compatible = "ti,tmp112";
        reg = <0x48>;
    };

    liquid_lens_tmp_sensor: maxim31875@4a {
        compatible = "maxim,max31875";
        reg = <0x4a>;
        conversions-per-second = "1";
        resolution = <8>;
    };

    // on EV5 the I2C address of the MAX31875R2 is translated from 0x4a to 0x5a for solving an address conflict
    // between the I2C address of the liquid lens EEPROM and the NFC reader (both on 0x50)
    liquid_lens_tmp_sensor_ev5: maxim31875@5a {
        compatible = "maxim,max31875";
        reg = <0x5a>;
        conversions-per-second = "1";
        resolution = <8>;
    };

    main_board_tmp_sensor: tmp112@49 {
        compatible = "ti,tmp112";
        reg = <0x49>;
    };

    tof_sensor: vl53l1x@29 {
        compatible = "st,vl53l1x";
        reg = <0x29>;
    };

    front_unit_als: bu27030@38 {
        compatible = "rohm,bu27030";
        reg = <0x38>;
    };
};

&fdcan1 {
    pinctrl-0 = <&fdcan1_rx_pd0 &fdcan1_tx_pd1>;
    pinctrl-names = "default";

    /*
     * 1. Choose the highest available CAN clock frequency: PCLK1 is used
     * 2. Set the BRPA bit-rate prescaler equal BRPB: done within Zephyr
     * 3. Choose BRPA and BRPD as low as possible: done within Zephyr
     * 4. Configure all CAN FD nodes to have the same arbitration phase SP
     *    and the same data phase SP: 85,2%
     * 5. Chose sjwD and sjwA as large as possible: MIN(PS1,PS2). Configuration
     * on the Jetson allows for a maximum of 4. We use 4 to keep the
     * configuration homogeneous (same Tq on all nodes)
     * 6. Enable TDC for data bit-rates higher than 1 Mbit/s
     */
    bitrate = <125000>;
    sample-point = <852>;
    bitrate-data = <1000000>;
    sample-point-data = <853>; // closest value
    status = "okay";
};

// For battery communications
&fdcan2 {
    pinctrl-0 = <&fdcan2_rx_pb5 &fdcan2_tx_pb6>;
    pinctrl-names = "default";
    bitrate = <1000000>;
    bitrate-data = <1000000>;
    status = "okay";
};

&spi1 {
    pinctrl-0 = <&spi1_sck_pa5 &spi1_miso_pa6 &spi1_mosi_pa7>;
    pinctrl-names = "default";
    cs-gpios = <&gpioa 3 GPIO_ACTIVE_LOW>;
    status = "okay";

    motion_controller: motion_controller@0 {
        compatible = "tmc,5041-spi";
        reg = <0>;
        spi-max-frequency = <4000000>;
        status = "okay";
    };
};

&iwdg {
    status = "okay";
};

&flash0 {
    /*
     * Base address: 0x8000000
     * For more information, see:
     * http://docs.zephyrproject.org/latest/guides/dts/index.html#flash-partitions
     */
    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        /* 48KiB for bootloader */
        boot_partition: partition@0 {
            label = "mcuboot";
            reg = <0x00000000 0x0000C000>;
            read-only;
        };

        /* 224KiB per slot */
        // 0x800C000
        slot0_partition: partition@C000 {
            label = "image-0";
            reg = <0x0000C000 0x00038000>;
        };
        // 0x8044000
        slot1_partition: partition@44000 {
            label = "image-1";
            reg = <0x00044000 0x00038000>;
        };

        /* 8KiB scratch */
        scratch_partition: partition@7C000 {
            label = "image-scratch";
            reg = <0x0007C000 0x00002000>;
        };

        /* 4KiB reserved for app storage partition */
        storage_partition: partition@7E000 {
            label = "storage";
            reg = <0x0007E000 0x00001000>;
        };

        /* 4KiB reserved for configuration partition */
        config_partition: partition@7F000 {
            label = "config";
            reg = <0x0007F000 0x00001000>;
        };
    };
};
